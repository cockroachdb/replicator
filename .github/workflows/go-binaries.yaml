# Copyright 2023 The Cockroach Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0

# Binaries will build Replicator for a variety of common platforms and
# optionally push the results to a GCP bucket.
name: Golang Binaries
permissions:
  contents: write # Needed to modify release.
  id-token: write
  statuses: write
on:
  workflow_call:
  workflow_dispatch:

jobs:
  binaries:
    name: Binaries
    runs-on: ${{ matrix.runner || 'ubuntu-latest' }}
    strategy:
      matrix:
        include:
          - os: linux
            arch: amd64
          - os: linux
            arch: amd64
            cgo: 1
            runner: ubuntu-20.04 # Roll glibc dependency back
            target: oracle
          - os: linux
            arch: arm64
          - os: darwin
            arch: arm64
          - os: darwin
            arch: amd64
          - os: windows
            arch: amd64
            ext: .exe
          - os: windows
            arch: arm64
            ext: .exe

    steps:
      - uses: actions/checkout@v4

      - id: setup_go
        name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'

      - id: package
        env:
          # replicator-linux-amd64[-target]
          PACKAGE_NAME: "replicator-${{ matrix.os }}-${{ matrix.arch }}${{ matrix.target && format('-{0}', matrix.target) || '' }}"
          PACKAGE_BIN_NAME: "replicator${{ matrix.ext }}" # replicator.exe
          PACKAGE_BUILD_FLAGS: ${{ matrix.target && format('-tags target_{0}', matrix.target) || '' }}
          PACKAGE_CGO_ENABLED: ${{ matrix.cgo || '0' }}
          PACKAGE_GOOS: ${{ matrix.os }}
          PACKAGE_GOARCH: ${{ matrix.arch }}
          UPLOAD_DIR: upload
        run: ./.github/workflows/package.sh

      - id: release-artifacts
        name: Attach binaries to GitHub Release
        if: ${{ github.event.release.tag_name }}
        env:
          GH_TOKEN: ${{ github.token }}
        run: gh release upload ${{ github.event.release.tag_name }} upload/replicator*-${{ github.event.release.tag_name }}*

      - id: auth
        name: Authenticate to GCP
        # Only authenticate if we're on the main repo (i.e. have access
        # to the secret).
        if: "${{ vars.GCP_SERVICE_ACCOUNT }}"
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: "${{ vars.WORKLOAD_IDENTITY_PROVIDER }}"
          service_account: "${{ vars.GCP_SERVICE_ACCOUNT }}"

      - id: upload
        uses: google-github-actions/upload-cloud-storage@v2
        if: "${{ steps.auth.outputs.auth_token }}"
        with:
          path: "upload/"
          parent: false # Don't include the upload directory name
          destination: ${{ vars.REPLICATOR_BUCKET }}/
          process_gcloudignore: false # Suppress warning about missing .gcloudignore file

      - id: link
        name: Summary link
        if: "${{ steps.upload.outputs.uploaded }}"
        env:
          UPLOAD_PATHS: ${{ steps.upload.outputs.uploaded }}
        run: |
          for f in ${UPLOAD_PATHS//,/ }; do # Split comma-separated list
            echo "[$(basename $f)](https://replicator.cockroachdb.com/$f)" >> $GITHUB_STEP_SUMMARY
          done

  # Aggregate the results of multiple jobs within this workflow into a
  # single status object that we can use for branch protection.
  #
  # https://docs.github.com/en/rest/commits/statuses
  status:
    name: Create status objects
    runs-on: ubuntu-latest
    needs: # Update failure case below
      - binaries
    if: ${{ always() }}
    env:
      CONTEXT: Workflow Binaries
      GH_TOKEN: ${{ github.token }}
      MERGE_SHA: ${{ github.event.merge_group.head_sha }}
      PR_SHA: ${{ github.event.pull_request.head.sha }}
      STATE: success
      RUN_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
    steps:
      - name: Failure
        if: ${{ needs.binaries.result != 'success' }}
        run: echo "STATE=failure" >> $GITHUB_ENV
      - name: Report
        run: |
          set -eo pipefail

          if [ ! -z "$PR_SHA" ]; then
            gh api \
               repos/${{ github.repository }}/statuses/$PR_SHA \
               -f "state=$STATE" \
               -f "context=$CONTEXT" \
               -f "target_url=$RUN_URL"
          fi

          if [ ! -z "$MERGE_SHA" ]; then
            gh api \
              repos/${{ github.repository }}/statuses/$MERGE_SHA \
              -f "state=$STATE" \
              -f "context=$CONTEXT" \
              -f "target_url=$RUN_URL"
          fi
