// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package all

import (
	"github.com/cockroachdb/replicator/internal/sinktest/base"
	"github.com/cockroachdb/replicator/internal/staging/checkpoint"
	"github.com/cockroachdb/replicator/internal/staging/memo"
	"github.com/cockroachdb/replicator/internal/staging/stage"
	"github.com/cockroachdb/replicator/internal/staging/version"
	"github.com/cockroachdb/replicator/internal/target/apply"
	"github.com/cockroachdb/replicator/internal/target/dlq"
	"github.com/cockroachdb/replicator/internal/target/load"
	"github.com/cockroachdb/replicator/internal/target/schemawatch"
	"github.com/cockroachdb/replicator/internal/util/applycfg"
	"github.com/cockroachdb/replicator/internal/util/diag"
	"testing"
	"time"
)

// Injectors from injector.go:

// NewFixture constructs a self-contained test fixture for all services
// in the target sub-packages.
func NewFixture(t testing.TB) (*Fixture, error) {
	context := base.ProvideContext(t)
	diagnostics := diag.New(context)
	sourcePool, err := base.ProvideSourcePool(context, diagnostics)
	if err != nil {
		return nil, err
	}
	sourceSchema, err := base.ProvideSourceSchema(context, sourcePool)
	if err != nil {
		return nil, err
	}
	stagingPool, err := base.ProvideStagingPool(context)
	if err != nil {
		return nil, err
	}
	stagingSchema, err := base.ProvideStagingSchema(context, stagingPool)
	if err != nil {
		return nil, err
	}
	targetPool, err := base.ProvideTargetPool(context, sourcePool, diagnostics)
	if err != nil {
		return nil, err
	}
	targetStatements := base.ProvideTargetStatements(context, targetPool)
	targetSchema, err := base.ProvideTargetSchema(context, diagnostics, targetPool, targetStatements)
	if err != nil {
		return nil, err
	}
	fixture := &base.Fixture{
		Context:      context,
		SourcePool:   sourcePool,
		SourceSchema: sourceSchema,
		StagingPool:  stagingPool,
		StagingDB:    stagingSchema,
		TargetCache:  targetStatements,
		TargetPool:   targetPool,
		TargetSchema: targetSchema,
	}
	configs, err := applycfg.ProvideConfigs(diagnostics)
	if err != nil {
		return nil, err
	}
	config, err := ProvideDLQConfig()
	if err != nil {
		return nil, err
	}
	duration := _wireDurationValue
	schemawatchConfig, err := ProvideSchemaWatchConfig(duration)
	if err != nil {
		return nil, err
	}
	memoMemo, err := memo.ProvideMemo(context, stagingPool, stagingSchema)
	if err != nil {
		return nil, err
	}
	backup := schemawatch.ProvideBackup(memoMemo, stagingPool)
	watchers, err := schemawatch.ProvideFactory(context, schemawatchConfig, targetPool, diagnostics, backup)
	if err != nil {
		return nil, err
	}
	dlQs := dlq.ProvideDLQs(config, targetPool, watchers)
	loader, err := load.ProvideLoader(targetStatements, targetPool)
	if err != nil {
		return nil, err
	}
	acceptor, err := apply.ProvideAcceptor(context, targetStatements, configs, diagnostics, dlQs, loader, targetPool, watchers)
	if err != nil {
		return nil, err
	}
	checkpoints, err := checkpoint.ProvideCheckpoints(context, stagingPool, stagingSchema)
	if err != nil {
		return nil, err
	}
	stagers := stage.ProvideFactory(stagingPool, stagingSchema, context)
	checker := version.ProvideChecker(stagingPool, memoMemo)
	watcher, err := ProvideWatcher(targetSchema, watchers)
	if err != nil {
		return nil, err
	}
	allFixture := &Fixture{
		Fixture:           fixture,
		ApplyAcceptor:     acceptor,
		Checkpoints:       checkpoints,
		Configs:           configs,
		Diagnostics:       diagnostics,
		DLQConfig:         config,
		DLQs:              dlQs,
		Loader:            loader,
		Memo:              memoMemo,
		SchemaWatchConfig: schemawatchConfig,
		Stagers:           stagers,
		VersionChecker:    checker,
		Watchers:          watchers,
		Watcher:           watcher,
	}
	return allFixture, nil
}

var (
	_wireDurationValue = &refreshDelay
)

// NewFixtureFromBase constructs a new Fixture over a [base.Fixture].
func NewFixtureFromBase(fixture *base.Fixture) (*Fixture, error) {
	context := fixture.Context
	targetStatements := fixture.TargetCache
	diagnostics := diag.New(context)
	configs, err := applycfg.ProvideConfigs(diagnostics)
	if err != nil {
		return nil, err
	}
	config, err := ProvideDLQConfig()
	if err != nil {
		return nil, err
	}
	targetPool := fixture.TargetPool
	duration := _wireTimeDurationValue
	schemawatchConfig, err := ProvideSchemaWatchConfig(duration)
	if err != nil {
		return nil, err
	}
	stagingPool := fixture.StagingPool
	stagingSchema := fixture.StagingDB
	memoMemo, err := memo.ProvideMemo(context, stagingPool, stagingSchema)
	if err != nil {
		return nil, err
	}
	backup := schemawatch.ProvideBackup(memoMemo, stagingPool)
	watchers, err := schemawatch.ProvideFactory(context, schemawatchConfig, targetPool, diagnostics, backup)
	if err != nil {
		return nil, err
	}
	dlQs := dlq.ProvideDLQs(config, targetPool, watchers)
	loader, err := load.ProvideLoader(targetStatements, targetPool)
	if err != nil {
		return nil, err
	}
	acceptor, err := apply.ProvideAcceptor(context, targetStatements, configs, diagnostics, dlQs, loader, targetPool, watchers)
	if err != nil {
		return nil, err
	}
	checkpoints, err := checkpoint.ProvideCheckpoints(context, stagingPool, stagingSchema)
	if err != nil {
		return nil, err
	}
	stagers := stage.ProvideFactory(stagingPool, stagingSchema, context)
	checker := version.ProvideChecker(stagingPool, memoMemo)
	targetSchema := fixture.TargetSchema
	watcher, err := ProvideWatcher(targetSchema, watchers)
	if err != nil {
		return nil, err
	}
	allFixture := &Fixture{
		Fixture:           fixture,
		ApplyAcceptor:     acceptor,
		Checkpoints:       checkpoints,
		Configs:           configs,
		Diagnostics:       diagnostics,
		DLQConfig:         config,
		DLQs:              dlQs,
		Loader:            loader,
		Memo:              memoMemo,
		SchemaWatchConfig: schemawatchConfig,
		Stagers:           stagers,
		VersionChecker:    checker,
		Watchers:          watchers,
		Watcher:           watcher,
	}
	return allFixture, nil
}

var (
	_wireTimeDurationValue = &refreshDelay
)

func NewFixtureWithRefresh(t testing.TB, d *time.Duration) (*Fixture, error) {
	context := base.ProvideContext(t)
	diagnostics := diag.New(context)
	sourcePool, err := base.ProvideSourcePool(context, diagnostics)
	if err != nil {
		return nil, err
	}
	sourceSchema, err := base.ProvideSourceSchema(context, sourcePool)
	if err != nil {
		return nil, err
	}
	stagingPool, err := base.ProvideStagingPool(context)
	if err != nil {
		return nil, err
	}
	stagingSchema, err := base.ProvideStagingSchema(context, stagingPool)
	if err != nil {
		return nil, err
	}
	targetPool, err := base.ProvideTargetPool(context, sourcePool, diagnostics)
	if err != nil {
		return nil, err
	}
	targetStatements := base.ProvideTargetStatements(context, targetPool)
	targetSchema, err := base.ProvideTargetSchema(context, diagnostics, targetPool, targetStatements)
	if err != nil {
		return nil, err
	}
	fixture := &base.Fixture{
		Context:      context,
		SourcePool:   sourcePool,
		SourceSchema: sourceSchema,
		StagingPool:  stagingPool,
		StagingDB:    stagingSchema,
		TargetCache:  targetStatements,
		TargetPool:   targetPool,
		TargetSchema: targetSchema,
	}
	configs, err := applycfg.ProvideConfigs(diagnostics)
	if err != nil {
		return nil, err
	}
	config, err := ProvideDLQConfig()
	if err != nil {
		return nil, err
	}
	schemawatchConfig, err := ProvideSchemaWatchConfig(d)
	if err != nil {
		return nil, err
	}
	memoMemo, err := memo.ProvideMemo(context, stagingPool, stagingSchema)
	if err != nil {
		return nil, err
	}
	backup := schemawatch.ProvideBackup(memoMemo, stagingPool)
	watchers, err := schemawatch.ProvideFactory(context, schemawatchConfig, targetPool, diagnostics, backup)
	if err != nil {
		return nil, err
	}
	dlQs := dlq.ProvideDLQs(config, targetPool, watchers)
	loader, err := load.ProvideLoader(targetStatements, targetPool)
	if err != nil {
		return nil, err
	}
	acceptor, err := apply.ProvideAcceptor(context, targetStatements, configs, diagnostics, dlQs, loader, targetPool, watchers)
	if err != nil {
		return nil, err
	}
	checkpoints, err := checkpoint.ProvideCheckpoints(context, stagingPool, stagingSchema)
	if err != nil {
		return nil, err
	}
	stagers := stage.ProvideFactory(stagingPool, stagingSchema, context)
	checker := version.ProvideChecker(stagingPool, memoMemo)
	watcher, err := ProvideWatcher(targetSchema, watchers)
	if err != nil {
		return nil, err
	}
	allFixture := &Fixture{
		Fixture:           fixture,
		ApplyAcceptor:     acceptor,
		Checkpoints:       checkpoints,
		Configs:           configs,
		Diagnostics:       diagnostics,
		DLQConfig:         config,
		DLQs:              dlQs,
		Loader:            loader,
		Memo:              memoMemo,
		SchemaWatchConfig: schemawatchConfig,
		Stagers:           stagers,
		VersionChecker:    checker,
		Watchers:          watchers,
		Watcher:           watcher,
	}
	return allFixture, nil
}

// injector.go:

var refreshDelay = time.Minute
