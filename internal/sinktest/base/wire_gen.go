// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package base

import (
	"github.com/cockroachdb/replicator/internal/sinktest"
	"github.com/cockroachdb/replicator/internal/util/diag"
	"github.com/cockroachdb/replicator/internal/util/stdpool"
	"testing"
)

// Injectors from injector.go:

// NewFixture constructs a self-contained test fixture.
func NewFixture(t testing.TB) (*Fixture, error) {
	breakers := sinktest.NewBreakers()
	context := ProvideContext(t)
	diagnostics := diag.New(context)
	sourcePool, err := ProvideSourcePool(context, diagnostics)
	if err != nil {
		return nil, err
	}
	sourceSchema, err := ProvideSourceSchema(context, sourcePool)
	if err != nil {
		return nil, err
	}
	stagingPool, err := ProvideStagingPool(context)
	if err != nil {
		return nil, err
	}
	stagingSchema, err := ProvideStagingSchema(context, stagingPool)
	if err != nil {
		return nil, err
	}
	memo := ProvideMemory()
	backup := stdpool.ProvideBackup(memo, stagingPool)
	targetPool, err := ProvideTargetPool(context, sourcePool, backup, diagnostics, breakers)
	if err != nil {
		return nil, err
	}
	targetStatements := ProvideTargetStatements(context, targetPool)
	targetSchema, err := ProvideTargetSchema(context, diagnostics, targetPool, targetStatements, backup, breakers)
	if err != nil {
		return nil, err
	}
	fixture := &Fixture{
		Breakers:     breakers,
		Context:      context,
		SourcePool:   sourcePool,
		SourceSchema: sourceSchema,
		StagingPool:  stagingPool,
		StagingDB:    stagingSchema,
		TargetCache:  targetStatements,
		TargetPool:   targetPool,
		TargetSchema: targetSchema,
	}
	return fixture, nil
}
