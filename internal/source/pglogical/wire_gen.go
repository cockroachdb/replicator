// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package pglogical

import (
	"github.com/cockroachdb/field-eng-powertools/stopper"
	"github.com/cockroachdb/replicator/internal/script"
	"github.com/cockroachdb/replicator/internal/sequencer/chaos"
	"github.com/cockroachdb/replicator/internal/sequencer/decorators"
	"github.com/cockroachdb/replicator/internal/sequencer/immediate"
	script2 "github.com/cockroachdb/replicator/internal/sequencer/script"
	"github.com/cockroachdb/replicator/internal/sinkprod"
	"github.com/cockroachdb/replicator/internal/staging/memo"
	"github.com/cockroachdb/replicator/internal/staging/stage"
	"github.com/cockroachdb/replicator/internal/staging/version"
	"github.com/cockroachdb/replicator/internal/target/apply"
	"github.com/cockroachdb/replicator/internal/target/dlq"
	"github.com/cockroachdb/replicator/internal/target/load"
	"github.com/cockroachdb/replicator/internal/target/schemawatch"
	"github.com/cockroachdb/replicator/internal/util/applycfg"
	"github.com/cockroachdb/replicator/internal/util/diag"
)

// Injectors from injector.go:

// Start creates a PostgreSQL logical replication loop using the
// provided configuration.
func Start(context *stopper.Context, config *Config) (*PGLogical, error) {
	diagnostics := diag.New(context)
	configs, err := applycfg.ProvideConfigs(diagnostics)
	if err != nil {
		return nil, err
	}
	scriptConfig := &config.Script
	loader, err := script.ProvideLoader(context, configs, scriptConfig, diagnostics)
	if err != nil {
		return nil, err
	}
	eagerConfig, err := ProvideEagerConfig(config, loader)
	if err != nil {
		return nil, err
	}
	targetConfig := &eagerConfig.Target
	stagingConfig := &eagerConfig.Staging
	stagingPool, err := sinkprod.ProvideStagingPool(context, stagingConfig, diagnostics, targetConfig)
	if err != nil {
		return nil, err
	}
	stagingSchema, err := sinkprod.ProvideStagingDB(context, stagingConfig, stagingPool)
	if err != nil {
		return nil, err
	}
	memoMemo, err := memo.ProvideMemo(context, stagingPool, stagingSchema)
	if err != nil {
		return nil, err
	}
	checker := version.ProvideChecker(stagingPool, memoMemo)
	targetPool, err := sinkprod.ProvideTargetPool(context, checker, targetConfig, diagnostics)
	if err != nil {
		return nil, err
	}
	targetStatements, err := sinkprod.ProvideStatementCache(context, targetConfig, targetPool, diagnostics)
	if err != nil {
		return nil, err
	}
	dlqConfig := &eagerConfig.DLQ
	watchers, err := schemawatch.ProvideFactory(context, targetPool, diagnostics)
	if err != nil {
		return nil, err
	}
	dlQs := dlq.ProvideDLQs(dlqConfig, targetPool, watchers)
	loadLoader, err := load.ProvideLoader(targetStatements, targetPool)
	if err != nil {
		return nil, err
	}
	acceptor, err := apply.ProvideAcceptor(context, targetStatements, configs, diagnostics, dlQs, loadLoader, targetPool, watchers)
	if err != nil {
		return nil, err
	}
	sequencerConfig := &eagerConfig.Sequencer
	chaosChaos := &chaos.Chaos{
		Config: sequencerConfig,
	}
	stagers := stage.ProvideFactory(stagingPool, stagingSchema, context)
	marker := decorators.ProvideMarker(stagingPool, stagers)
	once := decorators.ProvideOnce(stagingPool, stagers)
	retryTarget := decorators.ProvideRetryTarget(targetPool)
	immediateImmediate := immediate.ProvideImmediate(sequencerConfig, targetPool, marker, once, retryTarget, stagers)
	sequencer := script2.ProvideSequencer(loader, targetPool, watchers)
	conn, err := ProvideConn(context, acceptor, chaosChaos, config, immediateImmediate, memoMemo, sequencer, stagingPool, targetPool, watchers)
	if err != nil {
		return nil, err
	}
	pgLogical := &PGLogical{
		Conn:        conn,
		Diagnostics: diagnostics,
		Memo:        memoMemo,
	}
	return pgLogical, nil
}
