// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package server

import (
	"net"

	"github.com/cockroachdb/field-eng-powertools/stopper"
	"github.com/cockroachdb/replicator/internal/conveyor"
	"github.com/cockroachdb/replicator/internal/script"
	"github.com/cockroachdb/replicator/internal/sequencer/besteffort"
	"github.com/cockroachdb/replicator/internal/sequencer/core"
	"github.com/cockroachdb/replicator/internal/sequencer/decorators"
	"github.com/cockroachdb/replicator/internal/sequencer/immediate"
	"github.com/cockroachdb/replicator/internal/sequencer/retire"
	"github.com/cockroachdb/replicator/internal/sequencer/scheduler"
	script2 "github.com/cockroachdb/replicator/internal/sequencer/script"
	"github.com/cockroachdb/replicator/internal/sequencer/staging"
	"github.com/cockroachdb/replicator/internal/sequencer/switcher"
	"github.com/cockroachdb/replicator/internal/sinkprod"
	"github.com/cockroachdb/replicator/internal/source/cdc"
	staging2 "github.com/cockroachdb/replicator/internal/staging"
	"github.com/cockroachdb/replicator/internal/staging/checkpoint"
	"github.com/cockroachdb/replicator/internal/staging/leases"
	"github.com/cockroachdb/replicator/internal/staging/memo"
	"github.com/cockroachdb/replicator/internal/staging/stage"
	"github.com/cockroachdb/replicator/internal/staging/version"
	"github.com/cockroachdb/replicator/internal/target"
	"github.com/cockroachdb/replicator/internal/target/apply"
	"github.com/cockroachdb/replicator/internal/target/dlq"
	"github.com/cockroachdb/replicator/internal/target/load"
	"github.com/cockroachdb/replicator/internal/target/schemawatch"
	"github.com/cockroachdb/replicator/internal/types"
	"github.com/cockroachdb/replicator/internal/util/applycfg"
	"github.com/cockroachdb/replicator/internal/util/diag"
	"github.com/cockroachdb/replicator/internal/util/ident"
	"github.com/cockroachdb/replicator/internal/util/stdserver"
	"github.com/google/wire"
)

// Injectors from injector.go:

func NewServer(ctx *stopper.Context, config *Config) (*Server, error) {
	diagnostics := diag.New(ctx)
	configs, err := applycfg.ProvideConfigs(diagnostics)
	if err != nil {
		return nil, err
	}
	cdcConfig := &config.CDC
	scriptConfig := cdc.ProvideScriptConfig(cdcConfig)
	loader, err := script.ProvideLoader(ctx, configs, scriptConfig, diagnostics)
	if err != nil {
		return nil, err
	}
	eagerConfig, err := ProvideEagerConfig(config, loader)
	if err != nil {
		return nil, err
	}
	stagingConfig := &eagerConfig.Staging
	targetConfig := &eagerConfig.Target
	stagingPool, err := sinkprod.ProvideStagingPool(ctx, stagingConfig, diagnostics, targetConfig)
	if err != nil {
		return nil, err
	}
	stagingSchema, err := sinkprod.ProvideStagingDB(ctx, stagingConfig, stagingPool)
	if err != nil {
		return nil, err
	}
	authenticator, err := ProvideAuthenticator(ctx, diagnostics, config, stagingPool, stagingSchema)
	if err != nil {
		return nil, err
	}
	listener, err := ProvideListener(ctx, config, diagnostics)
	if err != nil {
		return nil, err
	}
	memoMemo, err := memo.ProvideMemo(ctx, stagingPool, stagingSchema)
	if err != nil {
		return nil, err
	}
	checker := version.ProvideChecker(stagingPool, memoMemo)
	targetPool, err := sinkprod.ProvideTargetPool(ctx, checker, targetConfig, diagnostics)
	if err != nil {
		return nil, err
	}
	targetStatements, err := sinkprod.ProvideStatementCache(ctx, targetConfig, targetPool, diagnostics)
	if err != nil {
		return nil, err
	}
	dlqConfig := cdc.ProvideDLQConfig(cdcConfig)
	backup := schemawatch.ProvideBackup(memoMemo, stagingPool)
	watchers, err := schemawatch.ProvideFactory(ctx, targetPool, diagnostics, backup)
	if err != nil {
		return nil, err
	}
	dlQs := dlq.ProvideDLQs(dlqConfig, targetPool, watchers)
	loadLoader, err := load.ProvideLoader(targetStatements, targetPool)
	if err != nil {
		return nil, err
	}
	acceptor, err := apply.ProvideAcceptor(ctx, targetStatements, configs, diagnostics, dlQs, loadLoader, targetPool, watchers)
	if err != nil {
		return nil, err
	}
	conveyorConfig := cdc.ProvideConveyorConfig(cdcConfig)
	checkpoints, err := checkpoint.ProvideCheckpoints(ctx, stagingPool, stagingSchema)
	if err != nil {
		return nil, err
	}
	sequencer := script2.ProvideSequencer(loader, targetPool, watchers)
	sequencerConfig := cdc.ProvideSequencerConfig(cdcConfig)
	stagers := stage.ProvideFactory(stagingPool, stagingSchema, ctx)
	retireRetire := retire.ProvideRetire(sequencerConfig, stagingPool, stagers)
	schedulerScheduler, err := scheduler.ProvideScheduler(ctx, sequencerConfig)
	if err != nil {
		return nil, err
	}
	bestEffort := besteffort.ProvideBestEffort(sequencerConfig, schedulerScheduler, stagers, stagingPool, watchers)
	typesLeases, err := leases.ProvideLeases(ctx, stagingPool, stagingSchema)
	if err != nil {
		return nil, err
	}
	coreCore := core.ProvideCore(sequencerConfig, typesLeases, schedulerScheduler, targetPool)
	marker := decorators.ProvideMarker(stagingPool, stagers)
	once := decorators.ProvideOnce(stagingPool, stagers)
	retryTarget := decorators.ProvideRetryTarget(targetPool)
	immediateImmediate := immediate.ProvideImmediate(sequencerConfig, targetPool, marker, once, retryTarget, stagers)
	stagingStaging := staging.ProvideStaging(sequencerConfig, marker, stagers, stagingPool)
	switcherSwitcher := switcher.ProvideSequencer(bestEffort, coreCore, diagnostics, immediateImmediate, stagingStaging, stagingPool, targetPool)
	conveyors, err := conveyor.ProvideConveyors(ctx, acceptor, conveyorConfig, checkpoints, sequencer, retireRetire, switcherSwitcher, watchers)
	if err != nil {
		return nil, err
	}
	handler, err := cdc.ProvideHandler(authenticator, cdcConfig, conveyors, targetPool)
	if err != nil {
		return nil, err
	}
	serveMux := ProvideMux(handler, stagingPool, targetPool)
	tlsConfig, err := ProvideTLSConfig(config)
	if err != nil {
		return nil, err
	}
	server := ProvideServer(ctx, authenticator, diagnostics, listener, serveMux, tlsConfig)
	serverServer := &Server{
		Server:        server,
		Checkpoints:   checkpoints,
		StagingSchema: stagingSchema,
		StagingPool:   stagingPool,
		TargetPool:    targetPool,
	}
	return serverServer, nil
}

// Injectors from test_fixture.go:

// We want this to be as close as possible to NewServer, it just exposes
// additional plumbing details via the returned testFixture pointer.
func newTestFixture(context *stopper.Context, config *Config) (*testFixture, func(), error) {
	diagnostics := diag.New(context)
	stagingConfig := &config.Staging
	targetConfig := &config.Target
	stagingPool, err := sinkprod.ProvideStagingPool(context, stagingConfig, diagnostics, targetConfig)
	if err != nil {
		return nil, nil, err
	}
	stagingSchema, err := sinkprod.ProvideStagingDB(context, stagingConfig, stagingPool)
	if err != nil {
		return nil, nil, err
	}
	authenticator, err := ProvideAuthenticator(context, diagnostics, config, stagingPool, stagingSchema)
	if err != nil {
		return nil, nil, err
	}
	listener, err := ProvideListener(context, config, diagnostics)
	if err != nil {
		return nil, nil, err
	}
	memoMemo, err := memo.ProvideMemo(context, stagingPool, stagingSchema)
	if err != nil {
		return nil, nil, err
	}
	cdcConfig := &config.CDC
	checker := version.ProvideChecker(stagingPool, memoMemo)
	targetPool, err := sinkprod.ProvideTargetPool(context, checker, targetConfig, diagnostics)
	if err != nil {
		return nil, nil, err
	}
	targetStatements, err := sinkprod.ProvideStatementCache(context, targetConfig, targetPool, diagnostics)
	if err != nil {
		return nil, nil, err
	}
	configs, err := applycfg.ProvideConfigs(diagnostics)
	if err != nil {
		return nil, nil, err
	}
	dlqConfig := cdc.ProvideDLQConfig(cdcConfig)
	backup := schemawatch.ProvideBackup(memoMemo, stagingPool)
	watchers, err := schemawatch.ProvideFactory(context, targetPool, diagnostics, backup)
	if err != nil {
		return nil, nil, err
	}
	dlQs := dlq.ProvideDLQs(dlqConfig, targetPool, watchers)
	loader, err := load.ProvideLoader(targetStatements, targetPool)
	if err != nil {
		return nil, nil, err
	}
	acceptor, err := apply.ProvideAcceptor(context, targetStatements, configs, diagnostics, dlQs, loader, targetPool, watchers)
	if err != nil {
		return nil, nil, err
	}
	conveyorConfig := cdc.ProvideConveyorConfig(cdcConfig)
	checkpoints, err := checkpoint.ProvideCheckpoints(context, stagingPool, stagingSchema)
	if err != nil {
		return nil, nil, err
	}
	scriptConfig := cdc.ProvideScriptConfig(cdcConfig)
	scriptLoader, err := script.ProvideLoader(context, configs, scriptConfig, diagnostics)
	if err != nil {
		return nil, nil, err
	}
	sequencer := script2.ProvideSequencer(scriptLoader, targetPool, watchers)
	sequencerConfig := cdc.ProvideSequencerConfig(cdcConfig)
	stagers := stage.ProvideFactory(stagingPool, stagingSchema, context)
	retireRetire := retire.ProvideRetire(sequencerConfig, stagingPool, stagers)
	schedulerScheduler, err := scheduler.ProvideScheduler(context, sequencerConfig)
	if err != nil {
		return nil, nil, err
	}
	bestEffort := besteffort.ProvideBestEffort(sequencerConfig, schedulerScheduler, stagers, stagingPool, watchers)
	typesLeases, err := leases.ProvideLeases(context, stagingPool, stagingSchema)
	if err != nil {
		return nil, nil, err
	}
	coreCore := core.ProvideCore(sequencerConfig, typesLeases, schedulerScheduler, targetPool)
	marker := decorators.ProvideMarker(stagingPool, stagers)
	once := decorators.ProvideOnce(stagingPool, stagers)
	retryTarget := decorators.ProvideRetryTarget(targetPool)
	immediateImmediate := immediate.ProvideImmediate(sequencerConfig, targetPool, marker, once, retryTarget, stagers)
	stagingStaging := staging.ProvideStaging(sequencerConfig, marker, stagers, stagingPool)
	switcherSwitcher := switcher.ProvideSequencer(bestEffort, coreCore, diagnostics, immediateImmediate, stagingStaging, stagingPool, targetPool)
	conveyors, err := conveyor.ProvideConveyors(context, acceptor, conveyorConfig, checkpoints, sequencer, retireRetire, switcherSwitcher, watchers)
	if err != nil {
		return nil, nil, err
	}
	handler, err := cdc.ProvideHandler(authenticator, cdcConfig, conveyors, targetPool)
	if err != nil {
		return nil, nil, err
	}
	serveMux := ProvideMux(handler, stagingPool, targetPool)
	tlsConfig, err := ProvideTLSConfig(config)
	if err != nil {
		return nil, nil, err
	}
	server := ProvideServer(context, authenticator, diagnostics, listener, serveMux, tlsConfig)
	serverTestFixture := &testFixture{
		Authenticator: authenticator,
		Config:        config,
		Diagnostics:   diagnostics,
		Listener:      listener,
		Memo:          memoMemo,
		StagingPool:   stagingPool,
		Server:        server,
		StagingDB:     stagingSchema,
		Stagers:       stagers,
		Watcher:       watchers,
	}
	return serverTestFixture, func() {
	}, nil
}

// injector.go:

var completeSet = wire.NewSet(
	Set, cdc.Set, diag.New, retire.Set, script.Set, sinkprod.Set, staging2.Set, switcher.Set, target.Set,
)

// test_fixture.go:

type testFixture struct {
	Authenticator types.Authenticator
	Config        *Config
	Diagnostics   *diag.Diagnostics
	Listener      net.Listener
	Memo          types.Memo
	StagingPool   *types.StagingPool
	Server        *stdserver.Server
	StagingDB     ident.StagingSchema
	Stagers       types.Stagers
	Watcher       types.Watchers
}
