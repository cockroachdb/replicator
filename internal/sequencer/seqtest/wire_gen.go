// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package seqtest

import (
	"github.com/cockroachdb/replicator/internal/script"
	"github.com/cockroachdb/replicator/internal/sequencer"
	"github.com/cockroachdb/replicator/internal/sequencer/besteffort"
	"github.com/cockroachdb/replicator/internal/sequencer/chaos"
	"github.com/cockroachdb/replicator/internal/sequencer/core"
	"github.com/cockroachdb/replicator/internal/sequencer/decorators"
	"github.com/cockroachdb/replicator/internal/sequencer/immediate"
	"github.com/cockroachdb/replicator/internal/sequencer/retire"
	"github.com/cockroachdb/replicator/internal/sequencer/scheduler"
	script2 "github.com/cockroachdb/replicator/internal/sequencer/script"
	"github.com/cockroachdb/replicator/internal/sequencer/switcher"
	"github.com/cockroachdb/replicator/internal/sinktest/all"
)

// Injectors from injector.go:

func NewSequencerFixture(fixture *all.Fixture, config *sequencer.Config, scriptConfig *script.Config) (*Fixture, error) {
	baseFixture := fixture.Fixture
	context := baseFixture.Context
	stagingPool := baseFixture.StagingPool
	stagingSchema := baseFixture.StagingDB
	leases, err := provideLeases(context, stagingPool, stagingSchema)
	if err != nil {
		return nil, err
	}
	stagers := fixture.Stagers
	marker := decorators.ProvideMarker(stagingPool, stagers)
	once := decorators.ProvideOnce(stagingPool, stagers)
	schedulerScheduler, err := scheduler.ProvideScheduler(context, config)
	if err != nil {
		return nil, err
	}
	targetPool := baseFixture.TargetPool
	watchers := fixture.Watchers
	bestEffort := besteffort.ProvideBestEffort(config, leases, marker, once, schedulerScheduler, stagingPool, stagers, targetPool, watchers)
	chaosChaos := &chaos.Chaos{
		Config: config,
	}
	coreCore := core.ProvideCore(config, leases, schedulerScheduler, stagers, stagingPool, targetPool)
	retryTarget := decorators.ProvideRetryTarget(targetPool)
	immediateImmediate := immediate.ProvideImmediate(config, targetPool, marker, once, retryTarget, stagers)
	retireRetire := retire.ProvideRetire(config, stagingPool, stagers)
	configs := fixture.Configs
	diagnostics := fixture.Diagnostics
	loader, err := script.ProvideLoader(context, configs, scriptConfig, diagnostics)
	if err != nil {
		return nil, err
	}
	scriptSequencer := script2.ProvideSequencer(loader, targetPool, watchers)
	switcherSwitcher := switcher.ProvideSequencer(bestEffort, coreCore, diagnostics, immediateImmediate, stagingPool, targetPool)
	seqtestFixture := &Fixture{
		Fixture:    fixture,
		BestEffort: bestEffort,
		Chaos:      chaosChaos,
		Core:       coreCore,
		Immediate:  immediateImmediate,
		Retire:     retireRetire,
		Script:     scriptSequencer,
		Switcher:   switcherSwitcher,
	}
	return seqtestFixture, nil
}
