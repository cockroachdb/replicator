{{- /*gotype: github.com/cockroachdb/replicator/internal/target/apply.templates*/ -}}
{{- /*
This template implements the conditional update flow (compare-and-set,
deadlines). For an expanded example, see the templates_test.go file.

The query is structured as a CTE, so we'll update this $dataSource
variable as different clauses are conditionally introduced.
*/ -}}
{{- $dataSource := "data" -}}

{{- /*
raw_data: the proposed values to insert. We explicitly name the columns
to aid in joins below.

WITH raw_data( pk0, pk1, val0, val1, ...) AS (VALUES ($1, $2, $3, ...))
*/ -}}
WITH raw_data( {{- template "names" .Columns -}} ) AS (
VALUES{{- nl -}}
{{- template "exprs" . -}}
),
{{- nl -}}

{{- /*
data: Adds a zero-based index number to the raw_data rows. This index
number will be returned by the top-level statement to indicate which
of the input rows could not be applied.
*/ -}}
data AS (SELECT (row_number() OVER () - 1) __idx__, * FROM raw_data)

{{- /*
deadlined: filters the incoming data by the deadline columns

deadlined AS (SELECT * from data WHERE ts > now() - '1m'::INTERVAL)
*/ -}}
{{- $deadlineEntries := deadlineEntries .Deadlines -}}
{{- if $deadlineEntries -}}
, {{- nl -}} {{- /* comma to terminate previous CTE clause. */ -}}
deadlined AS (SELECT * FROM {{ $dataSource }} WHERE
{{- range $entryIdx, $entry := $deadlineEntries -}}
    {{- if $entryIdx -}} AND {{- end -}}
    ( {{- $entry.Key -}} >now()-'{{- $entry.Value -}}'::INTERVAL)
{{- end -}})
{{- $dataSource = "deadlined" -}}
{{- end -}}


{{- /*
current: selects the current values of the PK and CAS columns by
joining the target table to the proposed data by PK

current AS (SELECT pk0, pk1, cas0, cas1 FROM target JOIN data USING (pk0, pk1))
*/ -}}
{{- if .Conditions -}}
, {{- nl -}} {{- /* comma to terminate previous CTE clause. */ -}}
current AS (
SELECT {{ template "names" .PK }}, {{ template "join" (qualify .TableName .Conditions) }}
FROM {{ .TableName }}
JOIN {{ $dataSource }}
USING ({{ template "names" .PK }})),
{{- nl -}}


{{- /*
action: left-joins data to current, by PK, where no current value
exists or the proposed data has a CAS tuple strictly greater than the
current data.

action AS (
  SELECT data.* FROM data
  LEFT JOIN current
  USING (pk0, pk1)
  WHERE current.pk0 IS NULL OR
  ( data.cas0, data.cas1) > ( current.cas0, current.cas1 )
*/ -}}
action AS (
SELECT {{ $dataSource }}.* FROM {{ $dataSource }}
LEFT JOIN current
USING ({{ template "names" .PK }})
WHERE current.{{ (index .PK 0).Name }}{{/* >= v21.2 lets us say "current IS NULL" */}} IS NULL OR
( {{- template "join" (qualify $dataSource .Conditions) -}} ) > ( {{- template "join" (qualify "current" .Conditions) -}} ))
{{- $dataSource = "action" -}}
{{- end -}}{{- /* .Conditions */ -}}

{{- /*
Upsert the actionable rows into the target table.

upserted AS(
UPSERT INTO table (pk0, pk1, ....)
  SELECT pk0, pk1, ... FROM dataSource
  RETURNING pk0, pk1 )
*/ -}}
, {{- nl -}} {{- /* comma to terminate previous CTE clause. */ -}}
upserted AS (
UPSERT INTO {{ .TableName }} ({{ template "names" .Columns }})
SELECT {{ template "names" .Columns }} FROM {{ $dataSource }}
RETURNING {{ template "names" .PK -}}
)

{{- /*
The main query returns unmodified rows from the source table by joining
aginst the proposed rows and the anti-joining against the rows that were
upserted. We return the index of the attempted row to make it easy to
create the conflict struct.

SELECT data.__idx__, t.pk0, t.pk1, t.col0, t.col1 FROM my_table t
JOIN data USING (pk0, pk1)
LEFT JOIN upserted USING (pk0, pk1)
WHERE upserted IS NULL

*/ -}}
{{- nl -}}
SELECT data.__idx__, {{ template "join" (qualify "t" .Columns) }} FROM {{ .TableName }} t
JOIN data USING ({{template "names" .PK }})
LEFT JOIN upserted USING ({{template "names" .PK }})
WHERE upserted.{{ (index .PK 0).Name }}{{/* >= v21.2 lets us say "upserted IS NULL" */}} IS NULL

{{- /* Trim whitespace */ -}}
